<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:snack="clr-namespace:GitOut.Features.Material.Snackbar"
    xmlns:converters="clr-namespace:GitOut.Features.Wpf.Converters"
>
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Themes/Material/MaterialDesignPalette.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Themes/AppTheme.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Themes/MaterialDesignIcons/MaterialDesignIcons.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>

    <Style x:Key="MaterialVerticalDivider" TargetType="{x:Type Separator}">
        <Setter Property="Margin" Value="4 4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Margin="{TemplateBinding Margin}">
                        <Rectangle Width="1" Height="24" Fill="{DynamicResource MaterialLightDividers}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialToolbarHeaderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="8"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightPrimaryText}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
    </Style>

    <Style x:Key="AnimatedMaterialToolbarHeaderStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialToolbarHeaderStyle}">
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <DiscreteDoubleKeyFrame Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                From="0"
                                To="1"
                                Duration="0:0:0.2"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.X)"
                                Duration="0:0:0.2"
                                From="32"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolbarSecondaryTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightSecondaryText}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>

    <Style x:Key="SecondaryTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightSecondaryText}"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="HintTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightSecondaryText}"/>
        <Setter Property="FontSize" Value="10"/>
        <Setter Property="Margin" Value="0 -8 0 0"/>
    </Style>

    <Style x:Key="PrimaryTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightPrimaryText}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Margin" Value="0 0 0 8"/>
    </Style>

    <Style x:Key="HeaderBaseTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialGray400}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="Margin" Value="0 0 0 4"/>
    </Style>

    <Style x:Key="Header5TextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeaderBaseTextStyle}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Regular"/>
    </Style>

    <Style x:Key="Header6TextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeaderBaseTextStyle}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Medium"/>
    </Style>

    <Style x:Key="MaterialInputStyle" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="32"/>
        <Setter Property="Margin" Value="0 0 0 16"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Grid Name="Inactive">
                            <Border
                                Name="InactiveBorder"
                                CornerRadius="0"
                                BorderThickness="0 0 0 1"
                                BorderBrush="{DynamicResource MaterialLightDividers}"
                            />
                            <TextBlock
                                x:Name="InactivePlaceholder"
                                Text="{TemplateBinding AutomationProperties.HelpText}"
                                Foreground="{DynamicResource MaterialForegroundBase}"
                                FontSize="12"
                            >
                                <TextBlock.RenderTransform>
                                    <MatrixTransform Matrix=".75 0 0 .75 0 -4" />
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </Grid>
                        <Grid Name="Active">
                            <Border
                                Name="ActiveBorder"
                                CornerRadius="0"
                                BorderThickness="0 0 0 1"
                                BorderBrush="{DynamicResource PrimaryHueMidBrush}"
                            />
                            <TextBlock
                                x:Name="ActivePlaceholder"
                                Text="{TemplateBinding AutomationProperties.HelpText}"
                                Foreground="{DynamicResource PrimaryHueMidBrush}"
                                FontSize="12"
                            >
                                <TextBlock.RenderTransform>
                                    <MatrixTransform Matrix=".75 0 0 .75 0 -4" />
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </Grid>

                        <ScrollViewer Margin="0 10 0 0" x:Name="PART_ContentHost" />

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InactiveBorder" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <ObjectAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialLightDisabledText}"/>
                                            </ObjectAnimationUsingKeyFrames.KeyFrames>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="InactiveBorder"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="Transparent"
                                        >
                                            <ColorAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </ColorAnimation.EasingFunction>
                                        </ColorAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver"/>
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualState Name="Unfocused">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="Inactive"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0:0:0.3"
                                        />
                                        <DoubleAnimation
                                            Storyboard.TargetName="Active"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0:0:0.3"
                                        />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="Inactive"
                                            Storyboard.TargetProperty="Opacity"
                                            To="0"
                                            Duration="0:0:0.1"
                                        />
                                        <DoubleAnimation
                                            Storyboard.TargetName="Active"
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0:0:0.1"
                                        />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialFormInputStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialInputStyle}">
        <Setter Property="Margin" Value="16"/>
    </Style>

    <Style x:Key="MaterialFormAreaStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialInputStyle}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="Margin" Value="16"/>
    </Style>

    <Style x:Key="MonoSpacedTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialInputStyle}">
        <Setter Property="FontFamily" Value="Cascadia Code, Consolas, Courier New" />
        <Setter Property="FontSize" Value="10" />
    </Style>

    <Style x:Key="MaterialToolbarInputStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialInputStyle}">
        <Setter Property="Margin" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border
                        Name="Border"
                        CornerRadius="2"
                        Padding="2"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0 0 0 1"
                        BorderBrush="{DynamicResource MaterialLightDividers}"
                    >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <ObjectAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialLightDisabledText}"/>
                                            </ObjectAnimationUsingKeyFrames.KeyFrames>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialDarkDisabledText}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver"/>
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualState Name="Unfocused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidForegroundColor}"
                                            Duration="0:0:0.2"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidForegroundColor}"
                                            Duration="0:0:0.2"
                                        />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <TextBlock
                                x:Name="Placeholder"
                                Text="{TemplateBinding AutomationProperties.HelpText}"
                                Foreground="{DynamicResource MaterialLightDividers}"
                                FontSize="10"
                                Margin="0 -12 0 0"
                            />
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialPasswordInputStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Margin" Value="0 0 0 16"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border
                        Name="Border"
                        CornerRadius="2"
                        Padding="2"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0 0 0 1"
                        BorderBrush="{DynamicResource MaterialLightDividers}"
                    >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <ObjectAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialLightDisabledText}"/>
                                            </ObjectAnimationUsingKeyFrames.KeyFrames>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialDarkDisabledText}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver"/>
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualState Name="Unfocused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidColor}"
                                            Duration="0:0:0.2"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidColor}"
                                            Duration="0:0:0.2"
                                        />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <TextBlock
                                x:Name="Placeholder"
                                Text="{TemplateBinding AutomationProperties.HelpText}"
                                Foreground="{DynamicResource MaterialLightDividers}"
                                FontSize="10"
                                Margin="0 -12 0 0"
                            />
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialPasswordFormInputStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MaterialPasswordInputStyle}">
        <Setter Property="Margin" Value="16"/>
    </Style>

    <Style x:Key="MaterialIconButtonStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="Margin" Value="6 0"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        Width="{TemplateBinding Height}"
                        Height="{TemplateBinding Height}"
                    >
                        <ContentPresenter
                            Margin="3 3 5 5"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                        />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialIconToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Margin" Value="6 0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="Bd"
                        CornerRadius="3"
                        BorderThickness="0"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        Width="{TemplateBinding Height}"
                        Height="{TemplateBinding Height}"
                        MinWidth="26"
                        MinHeight="26"
                    >
                        <ContentPresenter
                            Margin="3 3 5 5"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                        />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialBackgroundBackground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialListItemToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="Margin" Value="6 0"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        Width="{TemplateBinding Width}"
                    >
                        <ContentPresenter Margin="3 3 5 5" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialFabButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Width" Value="64"/>
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid
                        ClipToBounds="True"
                        Background="Transparent"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Width}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                    >
                        <Ellipse
                            Fill="{DynamicResource SecondaryAccentBrush}"
                            Width="48"
                            Height="48"
                        >
                            <Ellipse.Effect>
                                <DropShadowEffect
                                    BlurRadius="12"
                                    Opacity="0.6"
                                    Direction="270"
                                    ShadowDepth="2"
                                    Color="{DynamicResource PrimaryHueMidForegroundColor}"
                                />
                            </Ellipse.Effect>
                        </Ellipse>
                        <ContentPresenter
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                        />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                BeginTime="0:0:1"
                                Duration="0:0:0.2"
                                From="0"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleX)"
                                BeginTime="0:0:1"
                                Duration="0:0:0.2"
                                From="0.5"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleY)"
                                BeginTime="0:0:1"
                                Duration="0:0:0.2"
                                From="0.5"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <DiscreteDoubleKeyFrame Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextElement.FontWeight" Value="Medium"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="16 8"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        ClipToBounds="True"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        CornerRadius="4"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}">
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="Center"
                        />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialBackgroundPressed}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDarkButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialButtonStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}"/>
    </Style>

    <Style x:Key="ListViewItemButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid
                        ClipToBounds="True"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontWeight="{TemplateBinding FontWeight}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        Margin="16 8"
                    >
                        <ContentPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BadgeTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextElement.FontSize" Value="10"/>
        <Setter Property="Margin" Value="3 0"/>
    </Style>

    <Style x:Key="BadgeStyle" TargetType="{x:Type Border}">
        <Setter Property="Height" Value="16"/>
        <Setter Property="MinWidth" Value="16"/>
        <Setter Property="Background" Value="{DynamicResource MaterialGray800}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray900}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="8"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialLightPrimaryText}"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform X="8" Y="-8"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SplitHorizontalStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource MaterialGray800}"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="ResizeDirection" Value="Rows"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid
                        Background="{TemplateBinding Background}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="Stretch"
                        Height="{TemplateBinding Height}"
                    >
                        <Path
                            Fill="{DynamicResource MaterialForegroundBase}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Height="24"
                            Data="{StaticResource DragHorizontal}"
                        />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SplitVerticalStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource MaterialGray800}"/>
        <Setter Property="Width" Value="12"/>
        <Setter Property="ResizeDirection" Value="Columns"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid
                        Background="{TemplateBinding Background}"
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                        Width="{TemplateBinding Width}"
                    >
                        <Path
                            Fill="{DynamicResource MaterialForegroundBase}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="24"
                            Data="{StaticResource DragVertical}"
                        />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialToolbarStyle" TargetType="{x:Type Grid}">
        <Setter Property="Height" Value="54"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
    </Style>

    <Style x:Key="FlyInMaterialToolbarStyle" TargetType="{x:Type Grid}" BasedOn="{StaticResource MaterialToolbarStyle}">
        <Setter Property="Opacity" Value="0" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform X="15"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                Duration="0:0:0.2"
                                From="0"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.X)"
                                Duration="0:0:0.2"
                                From="15"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <DiscreteDoubleKeyFrame Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialDrawerMenuStyle" TargetType="{x:Type Border}">
        <Setter Property="DockPanel.Dock" Value="Left"/>
        <Setter Property="Width" Value="230"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialLightDividers}"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TranslateTransform X="0" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(Border.Width)"
                                To="230"
                                Duration="0:0:0.1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <!-- Lägg till behavior som animerar collapsed? -->
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Width)">
                                <DoubleAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteDoubleKeyFrame Value="0"/>
                                </DoubleAnimationUsingKeyFrames.KeyFrames>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialHorizontalDivider" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0 1" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialLightDividers}" />
        <Setter Property="Margin" Value="8 4" />
    </Style>

    <Style x:Key="LayoutRootGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="#EE303030" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                Duration="0:0:0.2"
                                From="0.4"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.Y)"
                                Duration="0:0:0.2"
                                From="15"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialFabContainerBottomRight" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="24 16"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
    </Style>

    <Style x:Key="CardPanelStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="16 16 16 0" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Background" Value="{DynamicResource MaterialGray800}" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="5"
                    Opacity="0.5"
                    Direction="270"
                    ShadowDepth="1"
                    Color="{DynamicResource MaterialBackgroundBackgroundColor}"
                />
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="Border" CornerRadius="2,0,0,0" BorderThickness="0 0 1 0" Background="{DynamicResource MaterialGray800}" BorderBrush="{DynamicResource MaterialGray800}">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundHoverColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundPressedColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundDisabledColor}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                Storyboard.TargetName="Arrow"
                                To="180"
                                Duration="0:0:.3"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                Storyboard.TargetName="Arrow"
                                To="0"
                                Duration="0:0:.3"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto" MinWidth="32"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter />
                <Grid Margin="0 8" Grid.Column="1">
                    <Canvas Width="24" Height="24">
                        <Path
                            x:Name="Arrow"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="24"
                            Height="24"
                            Data="{StaticResource ChevronDown}"
                            Fill="{DynamicResource MaterialForegroundBase}"
                        >
                            <Path.RenderTransform>
                                <RotateTransform Angle="0" CenterX="12" CenterY="12"/>
                            </Path.RenderTransform>
                        </Path>
                    </Canvas>
                </Grid>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style x:Key="MaterialExpansionStyle" TargetType="{x:Type Expander}">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
        <Setter Property="TextElement.FontFamily" Value="Roboto"/>
        <Setter Property="TextElement.FontSize" Value="12"/>
        <Setter Property="TextElement.FontWeight" Value="Regular"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="ContentRow" Height="0" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialBackgroundDisabledColor}"
                                            Duration="0:0:0.8"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialBackgroundDisabledColor}"
                                            Duration="0:0:0.8"
                                        />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border
                            x:Name="Border"
                            Grid.Row="0"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            BorderBrush="{TemplateBinding Background}"
                            CornerRadius="0"
                        >
                            <Grid>
                                <ToggleButton
                                    OverridesDefaultStyle="True"
                                    Template="{StaticResource ExpanderToggleButton}"
                                    IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                >
                                    <ContentPresenter Margin="4" ContentSource="Header" RecognizesAccessKey="True" />
                                </ToggleButton>
                            </Grid>
                        </Border>
                        <Border x:Name="Content" Grid.Row="1" BorderThickness="0" CornerRadius="0" BorderBrush="{DynamicResource MaterialBackgroundBackground}" Background="{DynamicResource MaterialBackgroundBackground}">
                            <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" Property="Height" Value="{Binding Height, ElementName=Content}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderThickness)"
                                            To="0 4"
                                            Duration="0:0:0.2"
                                        >
                                            <ThicknessAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ThicknessAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderThickness)"
                                            To="0"
                                            Duration="0:0:0.2"
                                        >
                                            <ThicknessAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseIn"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialExpansionListStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource MaterialBackgroundBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialBackgroundBackground}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="MinHeight" Value="32"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="Margin" Value="0"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border
                                            x:Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="True"
                                        >
                                            <ContentPresenter
                                                Margin="{TemplateBinding Padding}"
                                                VerticalAlignment="Center"
                                            />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                    <Setter Property="Margin" Value="8 0"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderThickness" Value="0 1 0 1"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}"/>
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="MinHeight" Value="32"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="Margin" Value="0"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDarkDividers}"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border
                                            x:Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="True"
                                        >
                                            <ContentPresenter
                                                Margin="{TemplateBinding Padding}"
                                                TextElement.Foreground="{TemplateBinding Foreground}"
                                                VerticalAlignment="Center"
                                            />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundPressed}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True"
                    >
                        <ScrollViewer
                            Padding="{TemplateBinding Padding}"
                            Focusable="False">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialToggleButtonGroupStyle" TargetType="{x:Type ItemsControl}">
        <Setter Property="Margin" Value="6 0" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <UniformGrid Rows="1" IsItemsHost="True" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border
                        CornerRadius="3"
                        BorderThickness="1"
                        BorderBrush="{DynamicResource MaterialDarkDividers}"
                        Padding="0"
                    >
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialIconToggleButtonStyle}">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Width" Value="32"/>
                <Setter Property="Height" Value="32"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="MaterialCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" Height="18" Margin="5 0">
                        <BulletDecorator.Bullet>
                            <Grid Width="18" Height="18">
                                <Rectangle x:Name="Border" StrokeThickness="2">
                                    <Rectangle.Stroke>
                                        <SolidColorBrush Color="{DynamicResource MaterialGray300Color}"/>
                                    </Rectangle.Stroke>
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="{DynamicResource MaterialBackgroundBackgroundColor}" />
                                                    <GradientStop Color="{DynamicResource MaterialGray800Color}" Offset="1.0" />
                                                </GradientStopCollection>
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle x:Name="CheckMark" Visibility="Collapsed">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{DynamicResource PrimaryHueMidColor}" />
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Canvas Width="24" Height="24">
                                    <Canvas.LayoutTransform>
                                        <ScaleTransform ScaleX=".7" ScaleY=".7"/>
                                    </Canvas.LayoutTransform>
                                    <Path Fill="{StaticResource MaterialGray800}" Data="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"/>
                                </Canvas>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter
                            Margin="9,0,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True"
                        />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundHoverColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundBackgroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#40000000" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#40000000" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ThicknessAnimation Storyboard.TargetProperty="Margin" Storyboard.TargetName="CheckMark" FillBehavior="HoldEnd" From="6" To="0" Duration="0:0:0.3">
                                            <ThicknessAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="14" Height="14">
                                <Ellipse x:Name="Border" StrokeThickness="1">
                                    <Ellipse.Stroke>
                                        <SolidColorBrush Color="{DynamicResource MaterialGray50Color}"/>
                                    </Ellipse.Stroke>
                                    <Ellipse.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="{DynamicResource MaterialBackgroundBackgroundColor}" />
                                                    <GradientStop Color="{DynamicResource MaterialGray800Color}" Offset="1.0" />
                                                </GradientStopCollection>
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Ellipse.Fill>
                                </Ellipse>
                                <Ellipse x:Name="CheckMark" Margin="3" Visibility="Collapsed">
                                    <Ellipse.Fill>
                                        <SolidColorBrush Color="{DynamicResource PrimaryHueMidColor}" />
                                    </Ellipse.Fill>
                                </Ellipse>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundHoverColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundBackgroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#40000000" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#40000000" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ThicknessAnimation Storyboard.TargetProperty="Margin" Storyboard.TargetName="CheckMark" FillBehavior="HoldEnd" From="6" To="3" Duration="0:0:0.3">
                                            <ThicknessAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter
                            Margin="4,1,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialListStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource MaterialBackgroundBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialBackgroundBackground}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="MinHeight" Value="48"/>
                            <Setter Property="Padding" Value="8 0 8 0"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0 1 0 1"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border
                                            x:Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="True"
                                        >
                                            <ContentPresenter 
                                                Margin="{TemplateBinding Padding}"
                                                VerticalAlignment="Center"
                                            />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderThickness" Value="0 1 0 1"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}"/>
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="MinHeight" Value="48"/>
                            <Setter Property="Padding" Value="8 0 8 0"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0 1 0 1"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border
                                            x:Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="True"
                                        >
                                            <ContentPresenter 
                                                Margin="{TemplateBinding Padding}"
                                                TextElement.Foreground="{TemplateBinding Foreground}"
                                                VerticalAlignment="Center"
                                            />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="BorderThickness" Value="0 1 0 1"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}"/>
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderThickness" Value="0 1 0 1"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}"/>
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True"
                    >
                        <ScrollViewer
                            Padding="{TemplateBinding Padding}"
                            Focusable="False">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialSnackbarStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Margin" Value="22"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type snack:Snack}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Message}" VerticalAlignment="Center"/>
                        <ItemsControl Grid.Column="1" ItemsSource="{Binding Actions}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate DataType="{x:Type snack:SnackAction}">
                                    <Button
                                        Style="{StaticResource MaterialDarkButtonStyle}"
                                        Command="{Binding Command}"
                                        Content="{Binding Text}"
                                    />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <StackPanel Grid.Column="2" Orientation="Horizontal">
                            <Button
                                Style="{StaticResource MaterialDarkButtonStyle}"
                                Command="{Binding CloseSnackCommand}"
                                ToolTip="Dismiss"
                            >
                                <Path Fill="{DynamicResource MaterialDarkDisabledText}" Data="{StaticResource Close}"/>
                            </Button>
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Padding" Value="16 8"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="MinWidth" Value="300"/>
                            <Setter Property="Background" Value="{DynamicResource MaterialForegroundBase}"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDarkPrimaryText}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border
                                            x:Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            CornerRadius="4"
                                            Opacity="0"
                                            TextElement.FontSize="14"
                                            SnapsToDevicePixels="True"
                                            Margin="0 2"
                                        >
                                            <Border.LayoutTransform>
                                                <ScaleTransform />
                                            </Border.LayoutTransform>
                                            <Border.RenderTransform>
                                                <ScaleTransform CenterX="150" CenterY="11"/>
                                            </Border.RenderTransform>
                                            <ContentPresenter Margin="{TemplateBinding Padding}"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation
                                                            Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)"
                                                            Duration="0:0:0.1"
                                                            From="0"
                                                            To="1"
                                                        />
                                                        <DoubleAnimation
                                                            Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleX)"
                                                            Duration="0:0:0.2"
                                                            BeginTime="0:0:0.1"
                                                            From="0"
                                                            To="1"
                                                        >
                                                            <DoubleAnimation.EasingFunction>
                                                                <QuinticEase EasingMode="EaseOut"/>
                                                            </DoubleAnimation.EasingFunction>
                                                        </DoubleAnimation>
                                                        <DoubleAnimation
                                                            Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleY)"
                                                            Duration="0:0:0.2"
                                                            BeginTime="0:0:0.1"
                                                            From="0"
                                                            To="1"
                                                        >
                                                            <DoubleAnimation.EasingFunction>
                                                                <QuinticEase EasingMode="EaseOut"/>
                                                            </DoubleAnimation.EasingFunction>
                                                        </DoubleAnimation>
                                                        <DoubleAnimation 
                                                            Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                            Duration="0:0:0.2"
                                                            BeginTime="0:0:0.1"
                                                            From="0"
                                                            To="1"
                                                        >
                                                            <DoubleAnimation.EasingFunction>
                                                                <QuinticEase EasingMode="EaseOut"/>
                                                            </DoubleAnimation.EasingFunction>
                                                        </DoubleAnimation>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            Padding="{TemplateBinding Padding}"
                            Focusable="False"
                        >
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="DefaultTreeViewItemTemplate" TargetType="{x:Type TreeViewItem}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="26" />
                <ColumnDefinition Width="*" MinWidth="300" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="SelectionStates">
                    <VisualState x:Name="Selected">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource MaterialGray900Color}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unselected" />
                    <VisualState x:Name="SelectedInactive">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)">
                                <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource MaterialGray800Color}" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="ExpansionStates">
                    <VisualState x:Name="Expanded">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                Storyboard.TargetName="Chevron"
                                To="90"
                                Duration="0:0:.1"
                            >
                            </DoubleAnimation>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Collapsed">
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                                Storyboard.TargetName="Chevron"
                                To="0"
                                Duration="0:0:.2"
                            >
                            </DoubleAnimation>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ToggleButton
                x:Name="Expander"
                Style="{StaticResource MaterialIconToggleButtonStyle}"
                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                ClickMode="Press"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
            >
                <Path
                    x:Name="Chevron"
                    Fill="{DynamicResource MaterialForegroundBase}"
                    Data="{StaticResource ChevronRight}"
                    RenderTransformOrigin=".8,.6"
                >
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>
            </ToggleButton>
            <Border
                x:Name="Bd"
                Grid.Column="1"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}"
            >
                <ContentPresenter
                    x:Name="PART_Header"
                    ContentSource="Header"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="Center"
                />
            </Border>
            <ItemsPresenter
                x:Name="ItemsHost"
                Grid.Row="1"
                Grid.Column="1"
                Visibility="Collapsed"
            />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasHeader" Value="false" />
                    <Condition Property="Width" Value="Auto" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Header" Property="MinWidth" Value="75" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HasHeader" Value="false" />
                    <Condition Property="Height" Value="Auto" />
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Header" Property="MinHeight" Value="19" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="DefaultTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="MinWidth" Value="300"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
        <Setter Property="Template" Value="{StaticResource DefaultTreeViewItemTemplate}">
        </Setter>
    </Style>

    <Style x:Key="MaterialTreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource MaterialBackgroundBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialBackgroundBackground}"/>
        <Setter Property="FontFamily" Value="Roboto Semibold"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultTreeViewItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True"
                    >
                        <ScrollViewer Padding="{TemplateBinding Padding}" Focusable="False">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="{DynamicResource MaterialGray800}" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}" />
        <Setter Property="FontFamily" Value="Roboto" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0,8" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid Margin="0 4">
                        <Rectangle Height="1" Fill="{DynamicResource MaterialLightDividers}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border
            x:Name="Bd"
            Background="Transparent"
            CornerRadius="3"
            BorderThickness="1"
            TextElement.Foreground="{DynamicResource MaterialForegroundBase}"
            TextElement.FontSize="{TemplateBinding FontSize}"
            TextElement.FontFamily="{TemplateBinding FontFamily}"
            Height="32"
            MinWidth="32"
            MinHeight="32"
        >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" MinWidth="32"  SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                </Grid.ColumnDefinitions>
                <ContentPresenter
                    Name="Icon"
                    ContentSource="Icon"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                />
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" />
                <Popup
                    StaysOpen="True"
                    x:Name="Popup"
                    Placement="Bottom"
                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                    AllowsTransparency="True"
                    Focusable="False"
                    PopupAnimation="Fade"
                >
                    <Grid>
                        <Border
                            x:Name="SubmenuBorder"
                            Style="{StaticResource CardPanelStyle}"
                            Margin="0 2"
                            Padding="0 4"
                            SnapsToDevicePixels="True"
                        >
                            <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </ScrollViewer>
                        </Border>
                    </Grid>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource MaterialBackgroundHover}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource MaterialBackgroundBackground}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Padding="12" Name="Border">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="24" />
                </Grid.ColumnDefinitions>
                <Canvas Margin="6 0" Name="Icon" Width="24">
                    <Canvas.RenderTransform>
                        <ScaleTransform ScaleX=".75" ScaleY=".75"/>
                    </Canvas.RenderTransform>
                    <ContentPresenter VerticalAlignment="Center" ContentSource="Icon" />
                </Canvas>
                <Border
                    Name="Check"
                    Width="13"
                    Height="24"
                    Visibility="Collapsed"
                    Background="{DynamicResource MaterialGray800}"
                    BorderThickness="1"
                    BorderBrush="{DynamicResource MaterialGray200}"
                >
                    <Path
                        Name="CheckMark"
                        Visibility="Hidden"
                        SnapsToDevicePixels="False"
                        Stroke="{DynamicResource MaterialGray200}"
                        StrokeThickness="2"
                        Data="{StaticResource CheckBold}"
                    />
                </Border>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MaterialGray700}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource MaterialGray800}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Padding="12" Name="Border">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="24" />
                </Grid.ColumnDefinitions>
                <Canvas Margin="6 0" Name="Icon" Width="24">
                    <Canvas.RenderTransform>
                        <ScaleTransform ScaleX=".75" ScaleY=".75"/>
                    </Canvas.RenderTransform>
                    <ContentPresenter VerticalAlignment="Center" ContentSource="Icon" />
                </Canvas>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}"/>
                <Canvas Grid.Column="3" Margin="6 0" Width="24">
                    <Canvas.RenderTransform>
                        <ScaleTransform ScaleX=".75" ScaleY=".75"/>
                    </Canvas.RenderTransform>
                    <Path Data="M10,17L15,12L10,7V17Z" Fill="{DynamicResource MaterialForegroundIcon}"/>
                </Canvas>
                <Popup
                    Name="Popup"
                    Placement="Right"
                    HorizontalOffset="7"
                    VerticalOffset="-17"
                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                    AllowsTransparency="True"
                    Focusable="False"
                    PopupAnimation="Fade"
                >
                    <Grid>
                        <Border
                            x:Name="SubmenuBorder"
                            Style="{StaticResource CardPanelStyle}"
                            Margin="5 2"
                            Padding="0 4"
                            SnapsToDevicePixels="True"
                        >
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Border>
                    </Grid>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MaterialBackgroundHover}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MaterialGray800}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border Padding="12" Name="Border">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="24" />
                </Grid.ColumnDefinitions>
                <Canvas Margin="6 0" Name="Icon" Width="24">
                    <Canvas.RenderTransform>
                        <ScaleTransform ScaleX=".75" ScaleY=".75"/>
                    </Canvas.RenderTransform>
                    <ContentPresenter VerticalAlignment="Center" ContentSource="Icon" />
                </Canvas>
                <Border
                    Name="Check"
                    Width="13"
                    Height="24"
                    Visibility="Collapsed"
                    Background="{DynamicResource MaterialGray800}"
                    BorderThickness="1"
                    BorderBrush="{DynamicResource MaterialGray200}"
                >
                    <Path
                        Name="CheckMark"
                        Visibility="Hidden"
                        SnapsToDevicePixels="False"
                        Stroke="{DynamicResource MaterialGray200}"
                        StrokeThickness="2"
                        Data="{StaticResource CheckBold}"
                    />
                </Border>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource MaterialGray700}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource MaterialGray800}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightPrimaryText}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border
                        x:Name="Border"
                        Margin="0 12"
                        CornerRadius="4"
                        BorderThickness="1"
                        BorderBrush="{DynamicResource MaterialLightDividers}"
                    >
                        <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Style.Triggers>
                    <Trigger Property="Role" Value="TopLevelHeader">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                    </Trigger>
                    <Trigger Property="Role" Value="TopLevelItem">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
                    </Trigger>
                    <Trigger Property="Role" Value="SubmenuHeader">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
                    </Trigger>
                    <Trigger Property="Role" Value="SubmenuItem">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <ControlTemplate.Resources>
                    </ControlTemplate.Resources>

                    <Border
                        x:Name="Border"
                        Background="{DynamicResource MaterialGray800}"
                        Margin="12"
                        BorderThickness="1"
                        BorderBrush="{DynamicResource MaterialGray800}"
                    >
                        <Border.Effect>
                            <DropShadowEffect
                                BlurRadius="12"
                                Opacity="0.6"
                                Direction="270"
                                ShadowDepth="2"
                                Color="{DynamicResource MaterialGray900Color}"
                            />
                        </Border.Effect>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Style.Triggers>
                    <Trigger Property="Role" Value="TopLevelHeader">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                    </Trigger>
                    <Trigger Property="Role" Value="TopLevelItem">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
                    </Trigger>
                    <Trigger Property="Role" Value="SubmenuHeader">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
                    </Trigger>
                    <Trigger Property="Role" Value="SubmenuItem">
                        <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Cursor" Value="SizeAll" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border
                        Background="Transparent"
                        SnapsToDevicePixels="True"
                        VerticalAlignment="Center"
                        IsHitTestVisible="True"
                    >
                        <Canvas Width="24" Height="24">
                            <Rectangle Fill="Transparent" Width="24" Height="24"/>
                            <Path Fill="{DynamicResource MaterialForegroundBase}" Data="{StaticResource DragVertical}"/>
                        </Canvas>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Storyboard x:Key="FlyInExitAnimation">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <DiscreteDoubleKeyFrame Value="0"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Style x:Key="MaterialToolBarStyle" TargetType="{x:Type ToolBar}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Opacity" Value="0" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <DockPanel>
                        <Thumb x:Name="ToolBarThumb" Style="{StaticResource ToolBarThumbStyle}" DockPanel.Dock="Left" ToolTip="Drag to move" />
                        <ToggleButton
                            x:Name="Overflow"
                            DockPanel.Dock="Right"
                            ClickMode="Press"
                            IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource MaterialIconToggleButtonStyle}"
                        >
                            <Grid Width="22">
                                <Path
                                    x:Name="Arrow"
                                    Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}"
                                    Data="{StaticResource DotsVertical}"
                                />
                                <Popup
                                    x:Name="OverflowPopup"
                                    AllowsTransparency="True"
                                    Placement="Bottom"
                                    StaysOpen="False"
                                    Focusable="False"
                                    PopupAnimation="Slide"
                                    IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                >
                                    <Border
                                        x:Name="DropDownBorder"
                                        CornerRadius="3"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource MaterialDarkDividers}"
                                    >
                                        <ToolBarOverflowPanel
                                            x:Name="PART_ToolBarOverflowPanel"
                                            Margin="2"
                                            WrapWidth="200"
                                            Focusable="true"
                                            FocusVisualStyle="{x:Null}"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                        />
                                    </Border>
                                </Popup>
                            </Grid>
                        </ToggleButton>
                        <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="True"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="HasOverflowItems" Value="False">
                            <Setter TargetName="Overflow" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource MaterialVerticalDivider}"/>
            <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialIconButtonStyle}"/>
            <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialIconToggleButtonStyle}"/>
            <Style x:Key="{x:Static ToolBar.MenuStyleKey}" TargetType="{x:Type Menu}" BasedOn="{StaticResource {x:Type Menu}}"/>
        </Style.Resources>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                BeginTime="0:0:0.3"
                                Duration="0:0:0.1"
                                From="0.4"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.X)"
                                BeginTime="0:0:0.3"
                                Duration="0:0:0.1"
                                From="15"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard Storyboard="{StaticResource FlyInExitAnimation}"/>
            </EventTrigger>
            <Trigger Property="Visibility" Value="Visible">
                <Setter Property="Opacity" Value="0"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform/>
                    </Setter.Value>
                </Setter>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                Duration="0:0:0.3"
                                From="0"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseIn"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.X)"
                                Duration="0:0:0.3"
                                From="24"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource FlyInExitAnimation}"/>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialToolbarTrayStyle" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Grid.Column" Value="1"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsLocked" Value="False"/>
        <Setter Property="Margin" Value="16 0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Resources>
            <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource MaterialToolBarStyle}"/>
        </Style.Resources>
    </Style>

    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="Padding" Value="10 6" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource MaterialGray700}" />
        <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4"
                        Opacity="0"
                        TextElement.FontSize="12"
                        TextElement.FontFamily="Roboto"
                        TextElement.FontWeight="Medium"
                        SnapsToDevicePixels="True"
                        Margin="0 2"
                    >
                        <ContentPresenter Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation 
                                        Storyboard.TargetName="Bd"
                                        Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                        Duration="0:0:0.1"
                                        From="0"
                                        To="1"
                                    >
                                        <DoubleAnimation.EasingFunction>
                                            <QuinticEase EasingMode="EaseOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>