<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:snack="GitOut.Features.Material.Snackbar"
    xmlns:menu="GitOut.Features.Menu"
    xmlns:converters="clr-namespace:GitOut.Features.Wpf.Converters"
>
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Themes/Material/MaterialDesignPalette.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Themes/AppTheme.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/Themes/MaterialDesignIcons/MaterialDesignIcons.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>

    <Style x:Key="MaterialToolbarHeaderStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="8"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightPrimaryText}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
    </Style>

    <Style x:Key="AnimatedMaterialToolbarHeaderStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialToolbarHeaderStyle}">
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <DiscreteDoubleKeyFrame Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Binding.TargetUpdated">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                From="0"
                                To="1"
                                Duration="0:0:0.2"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.X)"
                                Duration="0:0:0.2"
                                From="32"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SecondaryTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightSecondaryText}"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="PrimaryTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialLightPrimaryText}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Margin" Value="0 0 0 8"/>
    </Style>

    <Style x:Key="HeaderBaseTextStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialGray400}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="Margin" Value="0 0 0 4"/>
    </Style>

    <Style x:Key="Header5TextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeaderBaseTextStyle}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Regular"/>
    </Style>

    <Style x:Key="Header6TextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource HeaderBaseTextStyle}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Medium"/>
    </Style>

    <Style x:Key="MaterialInputStyle" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Margin" Value="0 0 0 16"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border
                        Name="Border"
                        CornerRadius="2"
                        Padding="2"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0 0 0 1"
                        BorderBrush="{DynamicResource MaterialLightDividers}"
                    >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <ObjectAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialLightDisabledText}"/>
                                            </ObjectAnimationUsingKeyFrames.KeyFrames>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialDarkDisabledText}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver"/>
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualState Name="Unfocused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidColor}"
                                            Duration="0:0:0.2"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidColor}"
                                            Duration="0:0:0.2"
                                        />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <TextBlock
                                x:Name="Placeholder"
                                Text="{TemplateBinding AutomationProperties.HelpText}"
                                Foreground="{DynamicResource MaterialLightDividers}"
                                FontSize="10"
                                Margin="0 -12 0 0"
                            />
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialFormInputStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialInputStyle}">
        <Setter Property="Margin" Value="16"/>
    </Style>

    <Style x:Key="MaterialFormAreaStyle"  TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialInputStyle}">
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="Margin" Value="16"/>
    </Style>

    <Style x:Key="MaterialToolbarInputStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialInputStyle}">
        <Setter Property="Margin" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border
                        Name="Border"
                        CornerRadius="2"
                        Padding="2"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0 0 0 1"
                        BorderBrush="{DynamicResource MaterialLightDividers}"
                    >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <ObjectAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialLightDisabledText}"/>
                                            </ObjectAnimationUsingKeyFrames.KeyFrames>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialDarkDisabledText}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver"/>
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualState Name="Unfocused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidForegroundColor}"
                                            Duration="0:0:0.2"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidForegroundColor}"
                                            Duration="0:0:0.2"
                                        />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <TextBlock
                                x:Name="Placeholder"
                                Text="{TemplateBinding AutomationProperties.HelpText}"
                                Foreground="{DynamicResource MaterialLightDividers}"
                                FontSize="10"
                                Margin="0 -12 0 0"
                            />
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialPasswordInputStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Margin" Value="0 0 0 16"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border
                        Name="Border"
                        CornerRadius="2"
                        Padding="2"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0 0 0 1"
                        BorderBrush="{DynamicResource MaterialLightDividers}"
                    >
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <ObjectAnimationUsingKeyFrames.KeyFrames>
                                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialLightDisabledText}"/>
                                            </ObjectAnimationUsingKeyFrames.KeyFrames>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Border.BorderBrush)">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{StaticResource MaterialDarkDisabledText}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver"/>
                            </VisualStateGroup>
                            <VisualStateGroup Name="FocusStates">
                                <VisualState Name="Unfocused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource MaterialLightDividersColor}"
                                            Duration="0:0:0.1"
                                        />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetName="Border"
                                            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidColor}"
                                            Duration="0:0:0.2"
                                        />
                                        <ColorAnimation
                                            Storyboard.TargetName="Placeholder"
                                            Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)"
                                            To="{StaticResource PrimaryHueMidColor}"
                                            Duration="0:0:0.2"
                                        />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid>
                            <TextBlock
                                x:Name="Placeholder"
                                Text="{TemplateBinding AutomationProperties.HelpText}"
                                Foreground="{DynamicResource MaterialLightDividers}"
                                FontSize="10"
                                Margin="0 -12 0 0"
                            />
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialPasswordFormInputStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MaterialPasswordInputStyle}">
        <Setter Property="Margin" Value="16"/>
    </Style>

    <Style x:Key="MaterialIconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="Margin" Value="6 0"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid
                        x:Name="PART_grid"
                        ClipToBounds="True"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        Width="{TemplateBinding Height}"
                        Height="{TemplateBinding Height}"
                    >
                        <Ellipse
                            x:Name="PART_ellipse"
                            Fill="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" 
                            Width="0" Height="{Binding Path=Width, RelativeSource={RelativeSource Self}}" 
                            HorizontalAlignment="Left"
                            VerticalAlignment="Top"
                        />
                        <ContentPresenter
                            x:Name="PART_contentpresenter"
                        />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NavigateBackButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialIconButtonStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <Canvas Width="24" Height="24">
                    <Path Fill="{DynamicResource PrimaryHueMidForegroundBrush}" Data="{StaticResource arrow-left}" />
                </Canvas>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialIconButtonStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <Canvas Width="24" Height="24">
                    <Path Fill="{DynamicResource PrimaryHueMidForegroundBrush}" Data="{StaticResource menu}" />
                </Canvas>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialFabButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Width" Value="64"/>
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="RenderTransformOrigin" Value="0.5, 0.5"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid
                        x:Name="PART_grid"
                        ClipToBounds="True"
                        Background="Transparent"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Width}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                    >
                        <Ellipse
                            x:Name="PART_ellipse"
                            Fill="{DynamicResource SecondaryAccentBrush}"
                            Width="48"
                            Height="48"
                        >
                            <Ellipse.Effect>
                                <DropShadowEffect
                                    BlurRadius="12"
                                    Opacity="0.6"
                                    Direction="270"
                                    ShadowDepth="2"
                                    Color="{DynamicResource PrimaryHueMidForegroundColor}"
                                />
                            </Ellipse.Effect>
                        </Ellipse>
                        <ContentPresenter
                            x:Name="PART_contentpresenter"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                        />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                BeginTime="0:0:1"
                                Duration="0:0:0.2"
                                From="0"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleX)"
                                BeginTime="0:0:1"
                                Duration="0:0:0.2"
                                From="0.5"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleY)"
                                BeginTime="0:0:1"
                                Duration="0:0:0.2"
                                From="0.5"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <DiscreteDoubleKeyFrame Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextElement.FontWeight" Value="Medium"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="16 8"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="PART_grid"
                        ClipToBounds="True"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        CornerRadius="4"
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}">
                        <ContentPresenter
                            Margin="{TemplateBinding Padding}"
                            x:Name="PART_contentpresenter"
                            HorizontalAlignment="Center"
                        />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource MaterialLightDisabledText}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource MaterialBackgroundPressed}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDarkButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialButtonStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}"/>
    </Style>

    <Style x:Key="ListViewItemButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid
                        ClipToBounds="True"
                        Background="{TemplateBinding Background}"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        TextElement.FontSize="{TemplateBinding FontSize}"
                        TextElement.FontWeight="{TemplateBinding FontWeight}"
                        TextElement.FontFamily="{TemplateBinding FontFamily}"
                        Margin="16 8"
                    >
                        <ContentPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialToolbarStyle" TargetType="{x:Type Grid}">
        <Setter Property="Height" Value="54"/>
        <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
    </Style>

    <Style x:Key="FlyInMaterialToolbarStyle" TargetType="{x:Type Grid}" BasedOn="{StaticResource MaterialToolbarStyle}">
        <Setter Property="Opacity" Value="0" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                Duration="0:0:0.2"
                                From="0"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.Y)"
                                Duration="0:0:0.2"
                                From="-15"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <DiscreteDoubleKeyFrame Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialDrawerMenuStyle" TargetType="{x:Type Border}">
        <Setter Property="DockPanel.Dock" Value="Left"/>
        <Setter Property="Width" Value="230"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialLightDividers}"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TranslateTransform X="0" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(Border.Width)"
                                To="230"
                                Duration="0:0:0.1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <!-- Lägg till behavior som animerar collapsed? -->
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.Width)">
                                <DoubleAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteDoubleKeyFrame Value="0"/>
                                </DoubleAnimationUsingKeyFrames.KeyFrames>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LayoutRootGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="#AA303030" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="Margin" Value="1 0 1 1" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                Duration="0:0:0.2"
                                From="0.4"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.Y)"
                                Duration="0:0:0.2"
                                From="15"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialFabContainerBottomRight" TargetType="{x:Type Grid}">
        <Setter Property="Margin" Value="24 16"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
    </Style>

    <Style x:Key="CardPanelStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="16 16 16 0" />
        <Setter Property="Padding" Value="16" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Background" Value="{DynamicResource MaterialGray800}" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="5"
                    Opacity="0.5"
                    Direction="270"
                    ShadowDepth="1"
                    Color="{DynamicResource MaterialBackgroundBackgroundColor}"
                />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionsPanelStyle" TargetType="{x:Type StackPanel}">
        <Setter Property="Orientation" Value="Horizontal" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="FlyInOptionsPanelStyle" TargetType="{x:Type StackPanel}" BasedOn="{StaticResource OptionsPanelStyle}">
        <Setter Property="Opacity" Value="0" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Storyboard.TargetProperty="Opacity"
                                BeginTime="0:0:0.3"
                                Duration="0:0:0.1"
                                From="0.4"
                                To="1"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <QuadraticEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation
                                Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TranslateTransform.X)"
                                BeginTime="0:0:0.3"
                                Duration="0:0:0.1"
                                From="15"
                                To="0"
                            >
                                <DoubleAnimation.EasingFunction>
                                    <ExponentialEase EasingMode="EaseOut"/>
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <DiscreteDoubleKeyFrame Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MaterialToolbarOptionsStyle" TargetType="{x:Type StackPanel}" BasedOn="{StaticResource FlyInOptionsPanelStyle}">
        <Setter Property="Grid.Column" Value="1"/>
        <Setter Property="Background" Value="#00000000"/>
        <Setter Property="Margin" Value="16 10"/>
    </Style>

    <Style x:Key="MaterialRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid Width="14" Height="14">
                                <Ellipse x:Name="Border" StrokeThickness="1">
                                    <Ellipse.Stroke>
                                        <SolidColorBrush Color="{DynamicResource MaterialGray50Color}"/>
                                    </Ellipse.Stroke>
                                    <Ellipse.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Color="{DynamicResource MaterialBackgroundBackgroundColor}" />
                                                    <GradientStop Color="{DynamicResource MaterialGray800Color}" Offset="1.0" />
                                                </GradientStopCollection>
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Ellipse.Fill>
                                </Ellipse>
                                <Ellipse x:Name="CheckMark" Margin="3" Visibility="Collapsed">
                                    <Ellipse.Fill>
                                        <SolidColorBrush Color="{DynamicResource PrimaryHueMidColor}" />
                                    </Ellipse.Fill>
                                </Ellipse>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundHoverColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="{StaticResource MaterialBackgroundBackgroundColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#40000000" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0" Value="#40000000" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckMark">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ThicknessAnimation Storyboard.TargetProperty="Margin" Storyboard.TargetName="CheckMark" FillBehavior="HoldEnd" From="6" To="3" Duration="0:0:0.3">
                                            <ThicknessAnimation.EasingFunction>
                                                <QuinticEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter
                            Margin="4,1,0,0"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left"
                            RecognizesAccessKey="True" />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialListStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource MaterialBackgroundBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialBackgroundBackground}"/>
        <Setter Property="FontFamily" Value="Roboto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="MinHeight" Value="48"/>
                            <Setter Property="Padding" Value="8 0 8 0"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0 1 0 1"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border
                                            x:Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="True">
                                            <ContentPresenter 
                                                Margin="{TemplateBinding Padding}"
                                                VerticalAlignment="Center"
                                            />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderThickness" Value="0 1 0 1"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}"/>
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="{x:Type ListViewItem}">
                            <Setter Property="MinHeight" Value="48"/>
                            <Setter Property="Padding" Value="8 0 8 0"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0 1 0 1"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border
                                            x:Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            SnapsToDevicePixels="True">
                                            <ContentPresenter 
                                                Margin="{TemplateBinding Padding}"
                                                TextElement.Foreground="{TemplateBinding Foreground}"
                                                VerticalAlignment="Center"
                                            />
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="BorderThickness" Value="0 1 0 1"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}"/>
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderThickness" Value="0 1 0 1"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}"/>
                                    <Setter Property="Background" Value="{DynamicResource MaterialBackgroundHover}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightBrush}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            Padding="{TemplateBinding Padding}"
                            Focusable="False">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialNavListStyle" BasedOn="{StaticResource MaterialListStyle}" TargetType="{x:Type ListBox}">
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialLightDividers}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="menu:MenuItem">
                    <Grid>
                        <Grid Visibility="{Binding IsItem, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Button Command="{Binding Command}" Style="{StaticResource ListViewItemButtonStyle}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" MinWidth="32"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Canvas Width="24" Height="24">
                                        <Path Fill="{DynamicResource MaterialForegroundBase}" Data="{Binding IconResourceKey, Converter={converters:StaticResourceConverter}}"/>
                                    </Canvas>
                                    <TextBlock Grid.Column="1" Text="{Binding Name}" FontFamily="Roboto"/>
                                </Grid>
                            </Button>
                        </Grid>
                        <Grid Visibility="{Binding IsHeader, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" MinWidth="32"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="1" Foreground="{DynamicResource MaterialGray400}" FontSize="12" FontWeight="Bold" Text="{Binding Name}" FontFamily="Roboto"/>
                            </Grid>
                        </Grid>
                        <Separator Visibility="{Binding IsDivider, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialSnackbarStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Margin" Value="22"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="snack:Snack">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Message}" VerticalAlignment="Center"/>
                        <StackPanel
                            Grid.Column="1"
                            Visibility="{Binding ActionText, Converter={StaticResource NullToVisibilityConverter}}"
                        >
                            <Button
                                Style="{StaticResource MaterialDarkButtonStyle}"
                                Command="{Binding ActionCommand}"
                                Content="{Binding ActionText}"
                            />
                        </StackPanel>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Padding" Value="16 8"/>
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="MinWidth" Value="300"/>
                            <Setter Property="Background" Value="{DynamicResource MaterialForegroundBase}"/>
                            <Setter Property="Foreground" Value="{DynamicResource MaterialDarkPrimaryText}"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Border
                                            x:Name="Bd"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            Background="{TemplateBinding Background}"
                                            CornerRadius="4"
                                            Opacity="0"
                                            TextElement.FontSize="14"
                                            SnapsToDevicePixels="True"
                                            Margin="0 2"
                                        >
                                            <Border.LayoutTransform>
                                                <ScaleTransform />
                                            </Border.LayoutTransform>
                                            <Border.RenderTransform>
                                                <ScaleTransform CenterX="150" CenterY="11"/>
                                            </Border.RenderTransform>
                                            <ContentPresenter Margin="{TemplateBinding Padding}"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation
                                                            Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)"
                                                            Duration="0:0:0.1"
                                                            From="0"
                                                            To="1"
                                                        />
                                                        <DoubleAnimation
                                                            Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleX)"
                                                            Duration="0:0:0.2"
                                                            BeginTime="0:0:0.1"
                                                            From="0"
                                                            To="1"
                                                        >
                                                            <DoubleAnimation.EasingFunction>
                                                                <QuinticEase EasingMode="EaseOut"/>
                                                            </DoubleAnimation.EasingFunction>
                                                        </DoubleAnimation>
                                                        <DoubleAnimation
                                                            Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(ScaleTransform.ScaleY)"
                                                            Duration="0:0:0.2"
                                                            BeginTime="0:0:0.1"
                                                            From="0"
                                                            To="1"
                                                        >
                                                            <DoubleAnimation.EasingFunction>
                                                                <QuinticEase EasingMode="EaseOut"/>
                                                            </DoubleAnimation.EasingFunction>
                                                        </DoubleAnimation>
                                                        <DoubleAnimation 
                                                            Storyboard.TargetName="Bd"
                                                            Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                            Duration="0:0:0.2"
                                                            BeginTime="0:0:0.1"
                                                            From="0"
                                                            To="1"
                                                        >
                                                            <DoubleAnimation.EasingFunction>
                                                                <QuinticEase EasingMode="EaseOut"/>
                                                            </DoubleAnimation.EasingFunction>
                                                        </DoubleAnimation>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </EventTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer
                            Padding="{TemplateBinding Padding}"
                            Focusable="False"
                        >
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
        <Setter Property="Padding" Value="10 6"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialGray800}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource MaterialGray700}"/>
        <Setter Property="Foreground" Value="{DynamicResource MaterialForegroundBase}"/>
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border
                        x:Name="Bd"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4"
                        Opacity="0"
                        TextElement.FontSize="12"
                        TextElement.FontFamily="Roboto"
                        TextElement.FontWeight="Medium"
                        SnapsToDevicePixels="True"
                        Margin="0 2"
                    >
                        <ContentPresenter Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation 
                                        Storyboard.TargetName="Bd"
                                        Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                        Duration="0:0:0.1"
                                        From="0"
                                        To="1"
                                    >
                                        <DoubleAnimation.EasingFunction>
                                            <QuinticEase EasingMode="EaseOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>